version: 2.1

parameters:
  min-rust-version:
    type: string
    default: "1.74"

executors:
  rust-env:
    docker:
      - image: jerusdp/ci-rust:<< pipeline.parameters.min-rust-version >>

commands:
  cargo-build:
    parameters:
      rust-version:
        default: "stable"
        type: string
    steps:
      - run:
          name: Check build <<parameters.rust-version>>
          command: |
            cargo +<<parameters.rust-version>> check --all-features

jobs:
  required-builds:
    executor: rust-env
    steps:
      - checkout
      - run: cargo --version
      - cargo-build
      - cargo-build:
          rust-version: "stable"
      - cargo-build:
          rust-version: << pipeline.parameters.min-rust-version >>

  optional-builds:
    executor: rust-env
    steps:
      - checkout
      - cargo-build:
          rust-version: "nightly"
      - cargo-build:
          rust-version: "beta"

  basic-tests:
    executor: rust-env
    steps:
      - checkout
      - run: cargo --version
      - run:
          name: Check formatting for code
          command: |
            rustfmt --version
            cargo fmt --all -- --check
      - run:
          name: Check idiomatic code use with Clippy
          command: "cargo clippy --all --tests --all-features -- -D warnings"
      - run:
          name: Test crate with no features specified
          command: "cargo test"

  docs:
    executor: rust-env
    environment:
      RUSTDOCFLAGS: --cfg docsrs -Dwarnings
    steps:
      - checkout
      - run:
          name: Test generation of all of the documentation for the crate
          command: |
            cargo +nightly doc --lib --no-deps --all-features --document-private-items

  make-release:
    executor: rust-env
    steps:
      - checkout
      - run:
          name: import GPG key
          command: |
            echo -e $GPG2 | gpg --batch --no-tty --import --yes
      - run:
          name: Configure git for user and signing
          command: |
            git config user.email "$USER_EMAIL"
            git config user.name "$USER_NAME"
            git config --global gpg.program gpg
            git config --global user.signingkey 9F13CF618E462C69
      - run:
          name: Publish update
          command: |
            set -exo pipefail

            if nextsv -vvv -c fix -e feature -r 'CHANGES.md' -r 'CHANGELOG.md' --set-env ; then 
              # will this work?
              cargo release change
              cargo release -vvv --registry spare --execute --no-confirm "$NEXTSV_LEVEL"
            else 
              echo "Not ready to release yet."
            fi

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build-test-docs:
    when:
      not:
        equal: [scheduled_pipeline, << pipeline.trigger_source >>]
    jobs:
      - required-builds
      - basic-tests
      - docs
      - optional-builds
  release-check:
    when:
      and:
        - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - equal: ["release check", << pipeline.schedule.name >>]
    jobs:
      - make-release
# VS Code Extension Version: 1.4.0
